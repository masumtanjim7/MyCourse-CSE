//For each loop (vector)
public class Main {
    public static void main(String[] args) {
        Vector<Integer> v1 = new Vector<Integer>();
        for(int i =1;i<=10;i++)
        {
            v1.add(i*10);
        }
        System.out.println("The Vector V is: "+v1);
        for(Integer x : v1)
        {
            System.out.println(x);
        }
        }
}

//Iterator
public class Main {
    public static void main(String[] args) {
        Vector<Integer> v1 = new Vector<Integer>();
        for(int i =1;i<=10;i++)
        {
            v1.add(i*10);
        }
        System.out.println("The Vector V is: "+v1);
        Iterator<Integer> itr = v1.iterator();
       // System.out.println(itr);
        while(itr.hasNext())
        {
            System.out.println(itr.next());
        }
        }
}
//Queue with linkedlist
public class Main{
public static void main(String[] args)
{
    Queue<Integer> q = new LinkedList<Integer>();
    for (int i = 0; i < 5; i++) {
        q.add(i);
    }

    System.out.println("Elements of queue " + q);

    int re = q.remove();
    System.out.println("removed element " + re);

    System.out.println(q);
    int head = q.peek();
    System.out.println("head of queue " + head);

    int size = q.size();
    System.out.println("Size of queue " + size);
}
}

//PriorityQueue
public class Main{
public static void main(String[] args)
{

        PriorityQueue<Integer> p1 = new PriorityQueue<Integer>();


        p1.add(10);
        p1.add(12);
        p1.add(14);


        System.out.println(p1.peek());


        System.out.println(p1.poll());


        System.out.println(p1.peek());
    }
}
//PriorityQueue
public class Main{
    public static void main(String[] args) {

        PriorityQueue<Integer> pq = new PriorityQueue<>(10);


        pq.add(2);
        pq.add(10);
        pq.add(3);
        pq.add(15);
        pq.add(4);


        System.out.println("Priority queue: " + pq);


        System.out.println("Peek: " + pq.peek());


        pq.poll();

        System.out.println("Priority queue after removing top element: " + pq);


        System.out.println("Does the queue contain 3? " + pq.contains(3));


        System.out.println("Size of queue: " + pq.size());


        pq.clear();


        System.out.println("Is the queue empty? " + pq.isEmpty());
    }
}
